From 263600954c4a8f8d606d7592a7f49f2b9df746ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Christoph=20Gr=C3=BCninger?= <foss@grueninger.de>
Date: Fri, 11 Oct 2024 08:14:39 +0200
Subject: [PATCH] Use std::function instead of boost::function

---
 zypp-core/base/Function.h    | 28 +++++++---------------------
 zypp-core/base/Iterator.h    |  1 -
 zypp/KeyManager.cc           |  6 +++---
 zypp/PoolItemBest.h          |  2 +-
 zypp/ZConfig.cc              |  2 +-
 zypp/parser/ParserProgress.h |  6 +++---
 zypp/target/TargetImpl.cc    |  4 ++--
 7 files changed, 17 insertions(+), 32 deletions(-)

diff --git a/zypp-core/base/Function.h b/zypp-core/base/Function.h
index 48d672a3d9..7438777ab0 100644
--- a/zypp-core/base/Function.h
+++ b/zypp-core/base/Function.h
@@ -13,32 +13,18 @@
 #define ZYPP_BASE_FUNCTION_H
 
 #include <functional>
-#include <boost/function.hpp>
 
 ///////////////////////////////////////////////////////////////////
 namespace zypp
 { /////////////////////////////////////////////////////////////////
 
-  /* http://www.boost.org/doc/html/function.html
-
-   The Boost.Function library contains a family of class templates
-   that are function object wrappers. The notion is similar to a
-   generalized callback. It shares features with function pointers
-   in that both define a call interface (e.g., a function taking
-   two integer arguments and returning a floating-point value)
-   through which some implementation can be called, and the
-   implementation that is invoked may change throughout the
-   course of the program.
-
-   Generally, any place in which a function pointer would be used
-   to defer a call or make a callback, Boost.Function can be used
-   instead to allow the user greater flexibility in the implementation
-   of the target. Targets can be any 'compatible' function object
-   (or function pointer), meaning that the arguments to the interface
-   designated by Boost.Function can be converted to the arguments of
-   the target function object.
-  */
-  using boost::function;
+  /* This header is no longer needed, it was meant to import
+   * boost::function. This is replaced by C++11's std::function
+   *
+   * TODO: 1) Remove this header. 2) Include <functional> instead.
+   *       3) Fully qualify std::function and std:: bind everywhere.
+   */
+  using std::function;
 
   using std::bind;
   using std::placeholders::_1;
diff --git a/zypp-core/base/Iterator.h b/zypp-core/base/Iterator.h
index 791973c61a..d78087743b 100644
--- a/zypp-core/base/Iterator.h
+++ b/zypp-core/base/Iterator.h
@@ -15,7 +15,6 @@
 #include <iterator>
 #include <utility>
 
-#include <boost/functional.hpp>
 #include <boost/iterator/filter_iterator.hpp>
 #include <boost/iterator/transform_iterator.hpp>
 #include <boost/iterator/function_output_iterator.hpp>
diff --git a/zypp/KeyManager.cc b/zypp/KeyManager.cc
index c276fea5f3..7ebb9651f1 100644
--- a/zypp/KeyManager.cc
+++ b/zypp/KeyManager.cc
@@ -50,9 +50,9 @@ namespace zypp
     }
 
     //using boost::interprocess pointer because it allows a custom deleter
-    using GpgmeDataPtr = boost::interprocess::scoped_ptr<gpgme_data, boost::function<void (gpgme_data_t)>>;
-    using GpgmeKeyPtr = boost::interprocess::scoped_ptr<_gpgme_key, boost::function<void (gpgme_key_t)>>;
-    using FILEPtr = boost::interprocess::scoped_ptr<FILE, boost::function<int (FILE *)>>;
+    using GpgmeDataPtr = boost::interprocess::scoped_ptr<gpgme_data, std::function<void (gpgme_data_t)>>;
+    using GpgmeKeyPtr = boost::interprocess::scoped_ptr<_gpgme_key, std::function<void (gpgme_key_t)>>;
+    using FILEPtr = boost::interprocess::scoped_ptr<FILE, std::function<int (FILE *)>>;
 
     struct GpgmeErr
     {
diff --git a/zypp/PoolItemBest.h b/zypp/PoolItemBest.h
index 0dfff9a06f..cd5f7932d9 100644
--- a/zypp/PoolItemBest.h
+++ b/zypp/PoolItemBest.h
@@ -65,7 +65,7 @@ namespace zypp
       using Container = std::unordered_map<IdString, PoolItem>;
     public:
       /** Predicate returning \c True if \a lhs is a better choice. */
-      using Predicate = boost::function<bool (const PoolItem &, const PoolItem &)>;
+      using Predicate = std::function<bool (const PoolItem &, const PoolItem &)>;
 
       using size_type = Container::size_type;
       using value_type = Container::value_type;
diff --git a/zypp/ZConfig.cc b/zypp/ZConfig.cc
index c3558542c5..9196787a8c 100644
--- a/zypp/ZConfig.cc
+++ b/zypp/ZConfig.cc
@@ -588,7 +588,7 @@ namespace zypp
                   std::vector<std::string> tmp;
                   str::split( value, back_inserter( tmp ), ", \t" );
 
-                  boost::function<Locale(const std::string &)> transform(
+                  std::function<Locale(const std::string &)> transform(
                     [](const std::string & str_r)->Locale{ return Locale(str_r); }
                   );
                   repoRefreshLocales.insert( make_transform_iterator( tmp.begin(), transform ),
diff --git a/zypp/target/TargetImpl.cc b/zypp/target/TargetImpl.cc
index 1960c8a3a8..1405f7bbc8 100644
--- a/zypp/target/TargetImpl.cc
+++ b/zypp/target/TargetImpl.cc
@@ -888,8 +888,8 @@ namespace zypp
      * the the value returned by \p value
      */
     void updateFileContent( const Pathname &filename,
-                            boost::function<bool ()> condition,
-                            boost::function<std::string ()> value )
+                            std::function<bool ()> condition,
+                            std::function<std::string ()> value )
     {
         std::string val = value();
         // if the value is empty, then just dont
